Construct a binary tree of size N using two given arrays pre[] and preLN[]. Array pre[] represents preorder traversal of a binary tree. Array preLN[] has only two possible values ‘L’ and ‘N’. The value ‘L’ in preLN[] indicates that the corresponding node in Binary Tree is a leaf node and value ‘N’ indicates that the corresponding node is a non-leaf node.
Note: Every node in the binary tree has either 0 or 2 children.

Example 1:

Input :      
N = 5
pre[] = {10, 30, 20, 5, 15}
preLN[] = {N, N, L, L, L}

Output:
          10
        /    \
      30      15
     /  \     
   20    5   
 

Your Task:  
You dont need to read input or print anything. Complete the function constructTree() which takes N, pre[] and preLN[] as input parameters and returns the root node of the constructed binary tree.
Note: The output generated by the compiler will contain the inorder traversal of the created binary tree.
 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)


Constraints:
1 ≤ N ≤ 104
1 ≤ pre[i] ≤ 107
preLN[i]: {'N', 'L'}




/*class Node{
    int data;
    Node left,right;
    Node(int d)
    {
        data=d;
        left=right=null;
    }
}*/
class Solution{
    private int index = 0;
    Node constructTree(int n, int pre[], char preLN[]){
	    // code here
	    if (pre == null || n == 0)
	        return null;
	    return findTheTree(pre, preLN, n); 
    }
    
    Node findTheTree(int [] pre, char [] preLN, int n) {
        if (index >= n) {
            return null;
        }
        Node node = new Node(pre[index]);
        if (preLN[index++] == 'N') {
            node.left = findTheTree(pre, preLN, n);
            node.right = findTheTree(pre, preLN, n);
        }
        return node;
    }
}